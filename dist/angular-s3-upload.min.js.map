{"version":3,"sources":["angular-s3-upload.js"],"names":["module","angular","directive","ngS3UploadService","$timeout","$http","link","scope","element","attrs","ngModel","_upload","forEach","files","v","k","lastModified","lastModifiedDate","error","process","then","file","isFunction","options","on_success","xhr","_error","name","$setValidity","on_error","$emit","isObject","errors","input","multiple","attr","css","opacity","position","top","right","width","height","bind","event","target","push","$apply","value","immediate","upload","overflow","append","$render","$viewValue","$watchCollection","newv","oldv","uploaded","size","isArray","extensions","length","ext","split","pop","toLowerCase","indexOf","filesize","limit","totalsize","required","$on","start_upload_state","policy","policyUrl","get","success","response","status","restrict","require","factory","$q","$index","uploadProgress","e","lengthComputable","loaded","last_loaded","time","Date","getTime","period","last_time","count","summ","speed","progress","Math","round","total","$setViewValue","uploadComplete","srcElement","real","protocol","bucket","key","stop","uploadFailed","uploadCanceled","cancel","webkitRelativePath","defer","resolve","reject","folder","secure","filename","replace","fd","FormData","acl","type","signature","XMLHttpRequest","addEventListener","open","send","percent","abort","promise","ngS3UploadTrigger","el","$parent","$broadcast","visibility","$watch","s3Upload","filter","bytes","precision","isNaN","parseFloat","isFinite","units","number","floor","log","pow","toFixed"],"mappings":"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","file":"angular-s3-upload.min.js","sourcesContent":["(!function() {\n    var module = angular.module('ngS3Upload', []);\n\n    module.directive('ngS3Upload', ['ngS3UploadService', '$timeout', '$http', function(ngS3UploadService, $timeout, $http) {\n        function link(scope, element, attrs, ngModel) {\n\n            var input = angular.element('<input type=\"file\">');\n            var errors = 0;\n\n            if (scope.options.multiple) {\n                input.attr('multiple', 'true');\n            }\n\n            input.css({\n                opacity: 0,\n                position: 'absolute',\n                top: 0,\n                right: 0,\n                width: '100%',\n                height: '100%'\n            }).bind('change', function(event) {\n                var files = event.target.files;\n\n                angular.forEach(files, function(v, k) {\n                    scope.files.push(v);\n                });\n                scope.$apply();\n                event.target.value = '';\n\n                if (scope.options.immediate) {\n                    scope.upload();\n                }\n            });\n\n            element.css({\n                position: 'relative',\n                overflow: 'hidden'\n            }).append(input);\n\n            ngModel.$render = function() {\n                scope.files = ngModel.$viewValue;\n            };\n\n            // Validation\n            scope.$watchCollection('files', function(newv, oldv) {\n                var uploaded = 0;\n                var size = 0;\n                errors = 0;\n\n                ngModel.$setValidity('upload', true);\n\n                angular.forEach(newv, function(v, k) {\n                    v.error = false;\n\n                    ngModel.$setValidity('extension', true);\n                    if (angular.isArray(scope.options.extensions) && scope.options.extensions.length > 0) {\n                        var ext = v.name.split('.').pop().toLowerCase();\n                        if (scope.options.extensions.indexOf(ext) == -1) {\n                            _error('extension', v);\n                        }\n                    }\n\n                    ngModel.$setValidity('filesize', true);\n                    if (scope.options.filesize > 0 && scope.options.filesize < v.size) {\n                        _error('filesize', v);\n                    }\n\n                    if (v.error !== true) {\n                        uploaded++;\n                    }\n                    size += v.size;\n                });\n\n                if (scope.options.limit > 0 && newv.length > scope.options.limit) {\n                    _error('totalfiles', newv);\n                }\n                else {\n                    ngModel.$setValidity('totalfiles', true);\n                }\n\n                if (scope.options.totalsize > 0 && scope.options.totalsize < size) {\n                    _error('totalsize', newv);\n                }\n                else {\n                    ngModel.$setValidity('totalsize', true);\n                }\n\n                if (attrs.required && uploaded == 0 && errors == 0) {\n                    _error('required', newv);\n                }\n                else {\n                    ngModel.$setValidity('required', true);\n                }\n            });\n\n            scope.$on('s3uploader:start', function() {\n                scope.upload();\n            });\n\n            scope.upload = function() {\n                scope.start_upload_state = true;\n\n                ngModel.$setValidity('policy_content', true);\n                ngModel.$setValidity('policy_get', true);\n                ngModel.$setValidity('policy_set', true);\n\n                if (angular.isObject(scope.options.policy)) {\n                    _upload();\n                }\n                else if(scope.options.policyUrl) {\n                    $http.get(scope.options.policyUrl).success(function(response, status) {\n                        if(!angular.isObject(response)) {\n                            _error('policy_content', response);\n                            return;\n                        }\n                        scope.options.policy = response;\n                        _upload();\n                    }).error(function(error, status) {\n                        _error('policy_get', error);\n                    });\n                }\n                else {\n                    _error('policy_set', null);\n                }\n            };\n\n            function _upload() {\n                angular.forEach(scope.files, function(v, k) {\n                    if ((!v.lastModified && !v.lastModifiedDate) || v.error) {\n                        return;\n                    }\n                    ngS3UploadService.process(v, k, scope, ngModel).then(function(file) {\n                        if(angular.isFunction(scope.options.on_success)) {\n                            scope.options.on_success('File uploaded success', file);\n                        }\n                    }, function(xhr) {\n                        _error('upload', v);\n                    });\n                })\n            }\n\n            function _error(name, file) {\n                ngModel.$setValidity(name, false);\n                if (angular.isFunction(scope.options['on_error_' + name])) {\n                    scope.options['on_' + name](file);\n                }\n                if (angular.isFunction(scope.options.on_error)) {\n                    scope.options.on_error(name, file);\n                }\n                scope.$emit('s3uploader:error:' + name, file);\n                scope.$emit('s3uploader:error', file);\n                if (angular.isObject(file)) {\n                    file.error = true;\n                }\n                errors++;\n            }\n        }\n\n        return {\n            restrict: 'EA',\n            link: link,\n            require: 'ngModel',\n            scope: {\n                options: '='\n            }\n        }\n    }]);\n\n    module.factory('ngS3UploadService', ['$q', '$timeout', function($q, $timeout) {\n        function process(file, $index, scope, ngModel) {\n            var defer = $q.defer();\n            var ext = file.name.split('.').pop().toLowerCase();\n            var key = scope.options.folder || '';\n            var protocol = (scope.options.secure && scope.options.secure == true) ? 'https://' : 'http://';\n\n            if (scope.options.filename) {\n                key += scope.options.filename + '.' + ext;\n            }\n            else {\n                key += file.name.replace(' ', '-');\n            }\n\n            var fd = new FormData();\n            fd.append('key', key);\n            fd.append('acl', scope.options.acl || 'public-read');\n            fd.append('Content-Type', file.type);\n            fd.append('AWSAccessKeyId', scope.options.policy.key);\n            fd.append('policy', scope.options.policy.policy);\n            fd.append('signature', scope.options.policy.signature);\n            fd.append(\"file\", file);\n\n            var xhr = new XMLHttpRequest();\n            xhr.upload.addEventListener(\"progress\", uploadProgress, false);\n            xhr.addEventListener(\"load\", uploadComplete, false);\n            xhr.addEventListener(\"error\", uploadFailed, false);\n            xhr.addEventListener(\"abort\", uploadCanceled, false);\n\n            xhr.open('POST', protocol + scope.options.bucket + '.s3.amazonaws.com/', true);\n            xhr.send(fd);\n\n            file.upload = true;\n            file.progress = false;\n            file.percent = 0;\n            file.cancel = function() {\n                xhr.abort();\n                delete file;\n            };\n\n            var last_loaded = 0;\n            var last_time = new Date().getTime();\n            var count = 0;\n            var summ = 0;\n\n            function uploadProgress(e) {\n                if (e.lengthComputable) {\n                    var loaded = e.loaded - last_loaded;\n                    last_loaded = e.loaded;\n\n                    var time = new Date().getTime();\n                    var period = (time - last_time) / 1000;\n                    last_time = time;\n\n                    count++;\n                    summ += (loaded / period) * 8;\n\n                    file.speed = summ / count;\n\n                    file.progress = Math.round(e.loaded * 100 / e.total);\n                }\n                ngModel.$setViewValue(scope.files);\n            }\n\n            function uploadComplete(e) {\n                var xhr = e.srcElement || e.target;\n                if (xhr.status === 204) {\n                    file.real = protocol + scope.options.bucket + '.s3.amazonaws.com/' + key;\n                    stop(true);\n                }\n                else {\n                    stop(false);\n                }\n            }\n\n            function uploadFailed(e) {\n                stop(false);\n            }\n\n            function uploadCanceled(e) {\n                stop(false);\n            }\n\n            function stop(success) {\n                $timeout(function() {\n                    scope.$apply(function() {\n                        file.success = success;\n\n                        delete file.progress;\n                        delete file.speed;\n                        delete file.cancel;\n                        delete file.upload;\n                        delete file.webkitRelativePath;\n                        delete file.lastModifiedDate;\n                        delete file.lastModified;\n\n                        scope.start_upload_state = false;\n\n                        if (success) {\n                            defer.resolve(file);\n                        }\n                        else {\n                            defer.reject(xhr);\n                        }\n                        scope.start_upload_state = false;\n                    });\n                }, 0);\n            }\n\n            return defer.promise;\n        }\n\n        return {\n            process: process\n        }\n    }]);\n\n    module.directive('ngS3UploadTrigger', [function() {\n        return {\n            restrict: 'EA',\n            scope: {\n                'ngS3UploadTrigger': '='\n            },\n            link: function(scope, el) {\n\n                el.bind('click', function() {\n                    scope.$parent.$broadcast('s3uploader:start');\n                });\n\n                el.css({'visibility': 'hidden'});\n\n                scope.$watch('ngS3UploadTrigger', function(oldv, newv) {\n                    angular.forEach(scope.s3Upload, function(v, k) {\n                        if (!v.real) {\n                            el.css({'visibility': 'visible'});\n                        }\n                        return false;\n                    })\n                }, true)\n            }\n        }\n    }]);\n\n    module.filter('s3Filesize', [function() {\n        return function(bytes, precision) {\n            if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {\n                return '-';\n            }\n            if (typeof precision === 'undefined') {\n                precision = 1;\n            }\n            var units = ['bytes', 'kB', 'MB', 'GB', 'TB', 'PB'];\n            var number = Math.floor(Math.log(bytes) / Math.log(1024));\n            return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\n        }\n    }]);\n\n    module.filter('s3TransferSpeed', [function() {\n        return function(bytes, precision) {\n            if (isNaN(parseFloat(bytes)) || !isFinite(bytes)) {\n                return '-';\n            }\n            if (typeof precision === 'undefined') {\n                precision = 1;\n            }\n            var units = ['Kb/s', 'Kbs/s', 'Mbs/s', 'Gbs/s', 'Tbs/s', 'Pbs/s'];\n            var number = Math.floor(Math.log(bytes) / Math.log(1024));\n            return (bytes / Math.pow(1024, Math.floor(number))).toFixed(precision) + ' ' + units[number];\n        }\n    }]);\n\n}());"],"sourceRoot":"/source/"}